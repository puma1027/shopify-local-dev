import {Configuration, ConfigurationList} from '../assembly/Configuration';

describe('Configuration', () => {
  describe('exists', () => {
    it('key exists', () => {
      const map = new Map<string, string>();
      map.set('wrongKey', 'wrongValue');
      map.set('key', 'value');
      const configuration = Configuration.fromMap(map);

      expect(configuration.exists('key')).toBe(true);
    });

    it("key doesn't exist", () => {
      const map = new Map<string, string>();
      map.set('wrongKey', 'wrongValue');
      const configuration = Configuration.fromMap(map);

      expect(configuration.exists('key')).toBe(false);
    });
  });

  describe('get', () => {
    it('returns value when key exists', () => {
      const map = new Map<string, string>();
      map.set('wrongKey', 'wrongValue');
      const expectedValue = 'value';
      map.set('key', expectedValue);
      const configuration = Configuration.fromMap(map);

      expect(configuration.get('key')).toBe(expectedValue);
    });

    it('returns null when key does not exist', () => {
      const map = new Map<string, string>();
      map.set('wrongKey', 'wrongValue');
      const configuration = Configuration.fromMap(map);

      expect(configuration.get('key')).toBe(null);
    });
  });
});

describe('ConfigurationList', () => {
  describe('new', () => {
    it('throws when length is not provided', () => {
      expect(() => {
        const map = new Map<string, string>();
        map.set('foo[0]', 'a');
        map.set('bar[0]', 'b');
        const configuration = Configuration.fromMap(map);

        new ConfigurationList(configuration);
      }).toThrow();

      expect(() => {
        const map = new Map<string, string>();
        map.set('length', 'Nan');
        map.set('foo[0]', 'a');
        map.set('bar[0]', 'b');
        const configuration = Configuration.fromMap(map);

        new ConfigurationList(configuration);
      }).toThrow();
    });

    it('succeeds when length is provided', () => {
      expect(() => {
        const map = new Map<string, string>();
        map.set('length', '2');
        map.set('foo[0]', 'a');
        map.set('bar[0]', 'b');
        map.set('foo[1]', 'c');
        map.set('bar[1]', 'd');
        const configuration = Configuration.fromMap(map);

        new ConfigurationList(configuration);
      }).not.toThrow();
    });
  });

  describe('[]', () => {
    describe('when index is out of range', () => {
      throws('on access', () => {
        const map = new Map<string, string>();
        map.set('length', '0');
        const emptyConfiguration = Configuration.fromMap(map);

        const list: ConfigurationList = new ConfigurationList(emptyConfiguration);

        list[0];
      });
    });

    describe('when index is in range', () => {
      describe('when keys are formatted properly', () => {
        it('returns the configurationListItem', () => {
          const map = new Map<string, string>();
          map.set('length', '2');
          map.set('foo[0]', 'a');
          map.set('bar[0]', 'b');
          map.set('foo[1]', 'c');
          map.set('bar[1]', 'd');

          const configuration = Configuration.fromMap(map);

          const list: ConfigurationList = new ConfigurationList(configuration);

          const config1 = list[0];
          const config2 = list[1];

          expect(config1.get('foo')).toBe('a');
          expect(config1.get('bar')).toBe('b');
          expect(config2.get('foo')).toBe('c');
          expect(config2.get('bar')).toBe('d');

          expect(config1.get('foo[0]')).toBe(null);
          expect(config1.get('foo[1]')).toBe(null);
          expect(config2.get('foo[0]')).toBe(null);
          expect(config2.get('foo[1]')).toBe(null);
        });
      });

      describe('when keys are not formatted properly', () => {
        it('return an empty configurationListItem', () => {
          const map = new Map<string, string>();
          map.set('length', '1');
          map.set('foo', 'a');
          map.set('bar', 'b');

          const configuration = Configuration.fromMap(map);

          const list = new ConfigurationList(configuration);
          const config = list[0];

          expect(config.get('foo')).toBe(null);
          expect(config.get('bar')).toBe(null);
        });
      });
    });
  });

  describe('length', () => {
    it('returns the length of a parsed configuration ', () => {
      const map = new Map<string, string>();
      map.set('length', '2');
      map.set('foo[0]', 'a');
      map.set('bar[0]', 'b');
      map.set('foo[1]', 'c');
      map.set('bar[1]', 'd');

      const configuration = Configuration.fromMap(map);

      const list: ConfigurationList = new ConfigurationList(configuration);
      expect(list.length).toBe(2);
    });

    it('returns the length of an empty configuration', () => {
      const map = new Map<string, string>();
      map.set('length', '0');
      const configuration = Configuration.fromMap(map);
      const list: ConfigurationList = new ConfigurationList(configuration);
      expect(list.length).toBe(0);
    });
  });
});

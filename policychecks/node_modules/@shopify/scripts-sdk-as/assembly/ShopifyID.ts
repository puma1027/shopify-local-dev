/**
 * For internal use only. Script developers not need to worry about InternalTypes.
 * ShopifyID is an internal Shopify ID that uniquely identifies a resource within Shopify.
 */
export abstract class ShopifyID<R> {
  /**
   * @hidden
   */
  protected readonly id: u64;

  /**
   * @hidden
   */
  protected readonly resource: string;

  /**
   * @hidden
   */
  protected constructor(id: u64, resource: string) {
    this.id = id;
    this.resource = resource;
  }

  /**
   * @hidden
   */
  protected static retrieveIdentifier(gid: string, resource: string): u64 {
    if (!gid.startsWith('gid://')) {
      throw new Error('Invalid scheme for ' + gid + ": expected 'gid'");
    }
    if (!gid.startsWith('gid://shopify/')) {
      throw new Error('Invalid authority for ' + gid + ": expected 'shopify'");
    }
    let fullPrefix = 'gid://shopify/' + resource + '/';
    if (!gid.startsWith(fullPrefix)) {
      throw new Error('Invalid path for ' + gid + ": expected '" + resource + "'");
    }
    return U64.parseInt(gid.substr(fullPrefix.length));
  }

  /**
   * @hidden
   */
  @operator('==')
  protected _eq(rhs: ShopifyID<R>): bool {
    return this.id == rhs.id && this.resource == rhs.resource;
  }

  /**
   * @hidden
   */
  @operator('!=')
  protected _neq(rhs: ShopifyID<R>): bool {
    return !this._eq(rhs);
  }
}

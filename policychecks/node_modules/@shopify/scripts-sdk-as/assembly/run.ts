import {safeInputLen, safeInputCopy, safeOutputCopy} from './shopify_v1';
import {Decoder} from '@wapc/as-msgpack';

let functionMapping = new Map<string, (buffer: ArrayBuffer) => ArrayBuffer>();

export function registerFunction(executionContext: string, fn: (buffer: ArrayBuffer) => ArrayBuffer): void {
  functionMapping.set(executionContext, fn);
}

function fetchInputBuffer(): ArrayBuffer {
  const lenPtr = memory.data<usize>([0]);
  safeInputLen(lenPtr);
  const len = load<usize>(lenPtr);

  let inputBuffer = new ArrayBuffer(<i32>len);
  safeInputCopy(inputBuffer);

  return inputBuffer;
}

function fetchExtensionPoint(inputBuffer: ArrayBuffer): string {
  const reader = new Decoder(inputBuffer);
  var numFields = reader.readMapSize();

  while (numFields > 0) {
    numFields--;
    const field = reader.readString();

    if (field == 'extension_point') {
      return reader.readString();
    } else {
      reader.skip();
    }
  }

  throw new Error('extension_point not specified');
}

export function run(): void {
  const inputBuffer = fetchInputBuffer();
  const executionContext = fetchExtensionPoint(inputBuffer);

  if (!functionMapping.has(executionContext)) {
    throw new Error('module does not implement this extension point');
  }
  const wrapper = functionMapping.get(executionContext);
  const outputBuffer = wrapper(inputBuffer);
  safeOutputCopy(outputBuffer, outputBuffer.byteLength);
}

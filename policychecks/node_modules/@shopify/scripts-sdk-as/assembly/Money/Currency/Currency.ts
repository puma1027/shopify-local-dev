export class Currency {
  /**
   * Creates an instance of `Currency`
   *
   * @param code The ISO 4217 code for the currency
   * @param subunitsPerUnit The amount of subunits per unit in this currency
   */
  constructor(public readonly code: string, private readonly subunitsPerUnit: i32) {}

  /**
   * Converts float units of `Currency` to the subunits value.
   * For example, when the currency is CAD and units is 0.10 (0.10 dollars), this method returns 10 (10 cents)
   * @param units The number of units to convert
   * @returns The corresponding integer amount of subunits
   */
  unitsToSubunits(units: f64): i64 {
    return <i64>Math.round(units * this.subunitsPerUnit);
  }

  /**
   * Converts integer subunits of `Currency` to the float units value.
   * For example, when the currency is CAD and subunits is 10 (10 cents), this method returns 0.10 (0.10 dollars).
   * @param subunits The integer subunits to convert to units
   * @returns The corresponding float amount of units
   */
  subunitsToUnits(subunits: i64): f64 {
    return <f64>subunits / this.subunitsPerUnit;
  }

  @operator('==')
  private __equals(other: Currency): bool {
    return this.code == other.code;
  }

  toString(): string {
    return this.code;
  }
}

import {safeParseInt} from './globals';

/**
 * Entry is a key-value pair.
 */
export class Entry {
  constructor(public readonly key: string, public readonly value: string) {}
}

/**
 * External configuration provided to a script as an array of Entry objects.
 */
export class Configuration {
  private constructor(private readonly entries: Array<Entry>) {}

  /**
   * Builds a configuration object.
   *
   * @param map - Map of the keys and values representing this configuration
   * @ignore
   */
  static fromMap(map: Map<string, string>): Configuration {
    const entries = new Array<Entry>();
    const keys = map.keys();
    for (let i = 0; i < keys.length; i++) {
      entries.push(new Entry(keys[i], map.get(keys[i])));
    }
    return new Configuration(entries);
  }

  /**
   * Determines if a key is set.
   *
   * @param key - the key to check
   * @returns A boolean representing if the key is set
   */
  exists(key: string): bool {
    return this.get(key) != null;
  }

  /**
   * Returns a value associated with the provided key, or null if no value has been set.
   *
   * @param key - the key of the value to be returned
   * @returns The string value associated with the provided key
   */
  get(key: string): string | null {
    for (let i = 0; i < this.entries.length; i++) {
      const entry: Entry = this.entries[i];
      if (entry.key == key) {
        return entry.value;
      }
    }
    return null;
  }
}

class ConfigurationListItem {
  constructor(private readonly index: i64, private readonly config: Configuration) {}

  /**
   * Determines if a key is set.
   *
   * @param key - the key to check
   * @returns A boolean representing if the key is set
   */
  exists(key: string): bool {
    const indexedKey = this.getIndexedKey(key);
    return this.config.exists(indexedKey);
  }

  /**
   * Returns a value associated with the provided key, or null if no value has been set.
   *
   * @param key - the key of the value to be returned
   * @returns The string value associated with the provided key
   */
  get(key: string): string | null {
    const indexedKey = this.getIndexedKey(key);
    return this.config.get(indexedKey);
  }

  private getIndexedKey(key: string): string {
    return key + '[' + this.index.toString() + ']';
  }
}

/**
 * ConfigurationList parses a list formatted Configuration object into an array of readable Configurations.
 */
export class ConfigurationList {
  readonly length: i64;
  private readonly config: Configuration;
  private readonly list: Array<ConfigurationListItem> = new Array<ConfigurationListItem>();

  constructor(config: Configuration) {
    this.config = config;

    const strLength = config.get('length');
    if (strLength == null) throw new Error('Configuration must have an entry for `length`.');
    this.length = safeParseInt(strLength!);

    for (let i = 0; i < this.length; i++) {
      this.list.push(new ConfigurationListItem(i, config));
    }
  }

  /**
   * @param index - The index of the configuration.
   * @returns The corresponding configuration.
   */
  @operator('[]')
  private __indexAccessor(index: i32): ConfigurationListItem {
    return this.list[index];
  }
}

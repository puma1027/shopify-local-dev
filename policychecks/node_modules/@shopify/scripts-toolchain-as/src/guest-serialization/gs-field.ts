import {Type, TypeKind} from 'assemblyscript';
import {GSClassField} from './gs-class-field';
import {toSnakeCase} from './utility';

export class GSField {
  readonly name: string;
  readonly type: Type;
  readonly alias: string | null;
  readonly isTransient: boolean;

  constructor(name: string, type: Type, alias: string | null = null, isTransient: boolean = false) {
    this.name = name;
    this.type = type;
    this.alias = alias;
    this.isTransient = isTransient;
  }

  get isClass(): boolean {
    return this.type.isClass;
  }

  get isNullableReference(): boolean {
    return this.type.isNullableReference;
  }

  get kind(): TypeKind {
    return this.type.kind;
  }

  get nameInSnakeCase(): string {
    const name = this.alias ? this.alias : this.name;
    return toSnakeCase(name);
  }

  asClassField(): GSClassField | null {
    return this.type.isClass ? new GSClassField(this.name, this.type, this.alias) : null;
  }

  get typeName(): string {
    if (this.isClass) {
      return this.asClassField()!.typeName;
    } else {
      return this.type.toString();
    }
  }

  get typeNameWithTypeArg(): string {
    if (this.isClass) {
      return this.asClassField()!.typeNameWithTypeArg;
    } else {
      return this.type.toString();
    }
  }

  getDefaultValue(): string | null {
    if (this.isClass) {
      return this.asClassField()!.getDefaultValue();
    } else {
      // default value for simple types can be auto inferred
      return null;
    }
  }
}

import {strict as assert} from 'assert';
import {GSFieldWriter} from './gs-field-writer';
import {GSClassField} from './gs-class-field';

export class GSClassFieldEncoder {
  static build(field: GSClassField): string {
    return new GSClassFieldEncoder(field).build();
  }

  constructor(private readonly field: GSClassField) {}

  private build(): string {
    const field = this.field;
    const ret: string[] = [];

    assert(!field.isExtendedArray, 'Types extend Array are not supported. Please use a wrapper type');

    const fields = field.getNonTransientFields();

    ret.push(`  encode(writer: Writer): void {`);
    ret.push(`    writer.writeMapSize(${fields.length});`);

    fields.forEach((f, _i) => {
      const fieldName = f.nameInSnakeCase;
      ret.push(`    writer.writeString('${fieldName}');`);
      ret.push(GSFieldWriter.build(f, 2, `this.${f.name}`));
    });
    ret.push(`  }`);

    return ret.join('\n');
  }
}

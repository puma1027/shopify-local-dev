import {ExportsWalker, Program, Element, Global, Enum, Field, Function, Class, Interface} from 'assemblyscript';

import {GSClassField} from './gs-class-field';

// This walker walks and searches for `InputWrapper` and `OutputWrapper`
export class GSWalker extends ExportsWalker {
  inputWrapper: GSClassField | null = null;
  outputWrapper: GSClassField | null = null;

  constructor(program: Program, includePrivate: boolean = false) {
    super(program, includePrivate);
  }

  // The following visitors are triggered by walk()
  visitFunction(_name: string, _element: Function): void {
    return;
  }
  visitClass(name: string, element: Class): void {
    if (name == '__Input') {
      this.inputWrapper = new GSClassField('__Input', element.type);
    } else if (name == '__Output') {
      this.outputWrapper = new GSClassField('__Output', element.type);
    }
    return;
  }
  visitInterface(name: string, element: Interface): void {
    this.visitClass(name, element);
  }

  visitGlobal(_name: string, _element: Global): void {}
  visitEnum(_name: string, _element: Enum): void {}
  visitField(_name: string, _element: Field): void {}

  // Not implemented visitors
  // Check https://github.com/AssemblyScript/assemblyscript/blob/master/src/definitions.ts for reference
  visitNamespace(_name: string, _element: Element): void {
    throw new Error('visitNamespace Not implemented');
  }
  visitAlias(_name: string, _element: Element, _originalName: string): void {
    throw new Error('visitAlias Not implemented');
  }
}

// This walker is a demo AS walker that extends AS ExportsWalker. When `walk()`, it traverses functions,,
// classes, etc with the hook methods.
//
// It's not being used anymore, just left as a reference
// @ts-ignore
class GSDemoWalker extends ExportsWalker {
  constructor(program: Program, includePrivate: boolean = false) {
    super(program, includePrivate);
    this.walk();
  }

  visitFunction(_name: string, _element: Function): void {
    return;
  }
  visitClass(_name: string, _element: Class): void {
    return;
  }
  visitInterface(name: string, element: Interface): void {
    this.visitClass(name, element);
  }

  // Not implemented visitors
  // Check https://github.com/AssemblyScript/assemblyscript/blob/master/src/definitions.ts for reference
  visitGlobal(_name: string, _element: Global): void {
    throw new Error('visitGlobal Not implemented');
  }
  visitEnum(_name: string, _element: Enum): void {
    throw new Error('visitEnum Not implemented');
  }
  visitField(_name: string, _element: Field): void {
    throw new Error('visitField Not implemented');
  }
  visitNamespace(_name: string, _element: Element): void {
    throw new Error('visitNamespace Not implemented');
  }
  visitAlias(_name: string, _element: Element, _originalName: string): void {
    throw new Error('visitAlias Not implemented');
  }
}

import {Program, Element, TypeDefinition, FunctionTypeNode, TypedElement} from 'assemblyscript';

import {GSField} from './gs-field';

const INTERFACE: string = 'interface/EPInterface';
const HANDLER: string = 'interface/EPHandler';

function searchElement(program: Program, target: string): Element {
  const keys = program.elementsByName.keys();
  for (const key of keys) {
    if (key.endsWith(target)) {
      return program.elementsByName.get(key)!;
    }
  }
  throw new Error(`${target} is not found`);
}

// This walker search through INTERFACE and HANDLER and save the input and output fields
export class GSIOWalker {
  inputFields: GSField[] = [];
  outputField: GSField | null = null;

  constructor(program: Program) {
    const epInterface = <TypeDefinition>searchElement(program, INTERFACE);
    const epHandler = <TypedElement>searchElement(program, HANDLER);
    if (!epHandler.type.isFunction) {
      throw new Error('EPHandler is not defined as function type');
    }

    const signature = epHandler!.type.getSignature()!;
    const parameters = (<FunctionTypeNode>epInterface.typeNode).parameters;

    signature.parameterTypes.forEach((paramType, i) => {
      const paramName = parameters[i].name.text;
      this.inputFields.push(new GSField(paramName, paramType));
    });

    const returnType = signature.returnType;
    this.outputField = new GSField('', returnType);
  }
}

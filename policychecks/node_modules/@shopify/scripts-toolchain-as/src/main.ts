import {build} from './build';
import {bootstrap} from './bootstrap';
import {codegen} from './codegen';

require('yargs')
  .command(
    'build',
    'build assembly script projects',
    (yargs: any) =>
      yargs
        .option('src', {
          demandOption: true,
          describe: 'Script source file.',
          type: 'string',
        })
        .option('binary', {
          alias: 'b',
          demandOption: true,
          describe: 'Where to place the resulting binary',
          type: 'string',
        })
        .option('metadata', {
          describe: 'Where to place the resulting metadata',
          type: 'string',
        })
        .option('ep', {
          describe: 'The extension point to use from a given domain. The domain option should also be set',
          type: 'string',
        })
        .option('domain', {
          describe: 'API domain that used in this script. The ep option should also be set',
          type: 'string',
          choices: ['checkout'],
        })
        .option('snapshot', {
          default: false,
          describe: 'Assert outputs are equal to specified files instead of overwriting them',
          type: 'boolean',
        }),
    build,
  )

  .command(
    'bootstrap',
    'bootstrap assemblyscript projects',
    (yargs: any) =>
      yargs
        .option('from', {
          alias: 'f',
          demandOption: true,
          describe: 'Extension point from which to bootstrap the script',
          type: 'string',
        })
        .option('dest', {
          alias: 'd',
          demandOption: true,
          describe: 'Bootstrap destination',
          type: 'string',
        })
        .option('domain', {
          demandOption: false,
          describe: 'API domain to use in the script',
          choices: ['checkout'],
        }),
    bootstrap,
  )

  .command(
    'codegen',
    'codegen wrapper entrypoint and serializeable types',
    (yargs: any) =>
      yargs.option('interface-definition', {
        demandOption: true,
        describe: 'Script interface file.',
        type: 'string',
      }),
    codegen,
  )

  .demandCommand()
  .help().argv;

import {bootstrap} from './bootstrap';
import * as fse from 'fs-extra';

describe('bootstrap', () => {
  beforeEach(() => {
    jest.resetAllMocks();
  });

  it('errors if the specified bootstrap location does not exist', () => {
    const proc = process;
    const exit = jest.fn();
    (global.process.exit as any) = exit;
    (fse.existsSync as jest.Mock).mockImplementation(() => false);
    bootstrap({from: 'foo', dest: './'});
    expect(exit).toHaveBeenCalledWith(1);
    global.process = proc;
  });

  describe('when no domain is given', () => {
    it('copies the extension point template from the legacy path into the specified dest directory', () => {
      (fse.existsSync as jest.Mock).mockImplementation(() => true);
      bootstrap({from: 'discount', dest: './'});
      expect(fse.copySync as jest.Mock).toHaveBeenCalledWith(
        './node_modules/@shopify/extension-point-as-discount/assembly/sample',
        './',
      );
    });
  });

  describe('when a domain is given', () => {
    it('copies the extension point template from the given domain into the specified dest directory', () => {
      (fse.existsSync as jest.Mock).mockImplementation(() => true);
      bootstrap({from: 'shipping-methods', dest: './', domain: 'checkout'});
      expect(fse.copySync as jest.Mock).toHaveBeenCalledWith(
        './node_modules/@shopify/scripts-checkout-apis/samples/shipping-methods',
        './',
      );
    });
  });
});

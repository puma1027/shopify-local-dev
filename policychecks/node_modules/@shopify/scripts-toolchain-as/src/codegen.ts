import {copyFileSync, unlinkSync} from 'fs';
import * as asc from 'assemblyscript/cli/asc';
import * as path from 'path';
import {GSClassField} from './guest-serialization/gs-class-field';

interface Argv {
  interfaceDefinition: string;
}

// Codegen InputWrapper and OutputWrapper to tmp/io-wrapper.ts
async function codegenInputWrapper(argv: Argv): Promise<void> {
  const GSIOTransformer = path.join(__dirname, '../dist/guest-serialization/gs-io-transformer.js');
  const ascArgs = [
    argv.interfaceDefinition,
    '--runtime',
    'stub',
    '--transform',
    GSIOTransformer,
    '--binaryFile',
    'tmp/codegen.wasm',
  ];
  console.log(`  ascArgs: ${ascArgs}`);

  await asc.ready;
  const flag = asc.main(ascArgs, {
    stdout: process.stdout,
    stderr: process.stderr,
  });
  if (flag !== 0) {
    throw new Error('codegen failed to generate input wrapper');
  }

  const ioWrapperDest = path.join(process.cwd(), path.dirname(argv.interfaceDefinition), 'io-wrapper.ts');
  copyFileSync('tmp/io-wrapper.ts', ioWrapperDest);
}

export async function codegen(argv: Argv): Promise<void> {
  // Massive hack to set the `CWD = location of serializer.ts` file is going to be generated.
  const dest = path.join(process.cwd(), path.dirname(argv.interfaceDefinition));
  GSClassField.serializerDir = dest;

  await codegenInputWrapper(argv);

  const GSTransformer = path.join(__dirname, '../dist/guest-serialization/gs-transformer.js');

  const ioWrapperLocation = path.join(dest, 'io-wrapper.ts');

  const ascArgs = [
    argv.interfaceDefinition,
    ioWrapperLocation,
    '--runtime',
    'stub',
    '--transform',
    GSTransformer,
    '--binaryFile',
    'tmp/codegen.wasm',
  ];
  console.log(`  ascArgs: ${ascArgs}`);

  await asc.ready;
  const flag = await asc.main(ascArgs, {
    stdout: process.stdout,
    stderr: process.stderr,
  });

  if (flag !== 0) {
    console.log(`codegen failed`);
    return;
  }

  try {
    // cleanup the intermediate file.
    unlinkSync(ioWrapperLocation);
  } catch (_err) {
    // noop
  }

  const serializerDest = path.join(dest, 'serializer.ts');
  copyFileSync('tmp/serializer.ts', serializerDest);
  console.log(`codegen finish successfully: ${serializerDest}`);
}

import {getMetadata} from './metadata';
import fs from 'fs';

import asc from 'assemblyscript/cli/asc';
import * as path from 'path';

const METAFILE_MODULE = path.join(__dirname, '../template/__shopify_meta');
const METAFILE = `${METAFILE_MODULE}.ts`;

export function build(argv: any): void {
  const binaryFile = path.join(process.cwd(), argv.binary);
  const metadataFile = argv.metadata && path.join(process.cwd(), argv.metadata);

  let ascArgs = [
    argv.src,
    METAFILE,
    '--use',
    `abort=${path.relative(process.cwd(), METAFILE_MODULE)}/abort`,
    '--runtime',
    'stub',
    '--binaryFile',
    argv.binary,
  ];

  ascArgs = ascArgs.concat(argv._.filter((param: string) => param !== 'build'));

  if (argv.snapshot) {
    snapshotCompare(binaryFile, ascArgs);
  } else {
    ascCompile(ascArgs, () => {
      if (metadataFile) {
        const metadata = getMetadata(argv.ep, argv.domain);
        fs.writeFileSync(metadataFile, JSON.stringify(metadata));
      }
      console.log(`Build Successful.`);
      console.log(`Binary: ${binaryFile}`);
      if (metadataFile) {
        console.log(`Metadata: ${metadataFile}`);
      }
    });
  }
}

function snapshotCompare(binaryFile: string, ascArgs: string[]): void {
  const expectedBinary = fs.readFileSync(binaryFile);

  ascCompile(ascArgs, () => {
    console.log('Comparing build against snapshot..');
    const actualBinary = fs.readFileSync(binaryFile);
    let success = true;

    if (Buffer.compare(actualBinary, expectedBinary) == -1) {
      console.log('Outputted Binary does not match snapshot');
      fs.writeFileSync(binaryFile, expectedBinary);
      success = false;
    }
    if (success) {
      console.log('Build snapshot matches');
    } else {
      process.exit(1);
    }
  });
}

function ascCompile(ascArgs: string[], callback: () => void): void {
  asc.ready.then(() => {
    asc.main(
      ascArgs,
      {
        stdout: process.stdout,
        stderr: process.stderr,
      },
      function (err: Error | null) {
        if (err) throw err;
        callback();
        return 0;
      },
    );
  });
}

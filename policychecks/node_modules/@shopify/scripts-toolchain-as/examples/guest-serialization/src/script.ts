import {Console, Box} from '@shopify/scripts-sdk-as';
import {Product} from '../ep1/product';
import {Configuration} from '../ep1/configuration';
import {Key, Value, MyMap, Flag} from '../ep2/key';
import {Field, Fields} from '../ep3/field';
import {User, Quantity} from '../ep4/user';

export function handleEP1(product: Product, config: Configuration): Product {
  return product;
}

export function handleEP2(
  number: i8,
  array: Array<Key>,
  map: Map<string, Value>,
  key: Key,
  myMap: MyMap,
  flag: Flag,
  setOfNumber: Set<i8>,
  setOfKey: Set<Key>,
): Set<Key> {
  return setOfKey;
}

export function handleEP3(field: Field): Fields {
  // check in engine log to make sure values are correctly deserialized
  Console.log('==============');
  Console.log('key: ' + field.key);
  Console.log('flag: ' + field.flag.toString());
  Console.log('num: ' + field.num.toString());
  Console.log('transientKey: ' + field.transientKey);
  Console.log('listOfNum (len): ' + field.listOfNum.length.toString());
  Console.log('tag.name: ' + field.tag.name);
  Console.log('transientTag.num: ' + field.transientTag.num.toString());
  Console.log('map: ');
  let keys = field.map.keys();
  for (let i = 0; i < keys.length; i++) {
    const k = keys[i];
    const v = field.map.get(k);
    Console.log('  ' + k.toString() + ': ' + v.toString());
  }
  Console.log('mapOfArrayValue: ');
  keys = field.mapOfArrayValue.keys();
  for (let i = 0; i < keys.length; i++) {
    const k = keys[i];
    const v: Array<i32> = field.mapOfArrayValue.get(k);
    const values = v
      .map<string>((vv) => vv.toString())
      .join(', ');
    Console.log('  ' + k.toString() + ': ' + values);
  }
  Console.log('mapOfTag: ');
  keys = field.mapOfTag.keys();
  for (let i = 0; i < keys.length; i++) {
    const k = keys[i];
    const v = field.mapOfTag.get(k);
    Console.log('  ' + k.toString() + ': ' + v.name);
  }
  Console.log('==============');
  return new Fields([field]);
}

export function handleEP4(user: User, boxOfNumber: Box<Quantity> | null, boxOfBool: Box<bool>): User {
  Console.log('==============');
  if (boxOfNumber == null) {
    Console.log('boxOfNumber: null');
  } else {
    Console.log('boxOfNumber: ' + boxOfNumber.value.toString());
  }
  if (boxOfBool == null) {
    Console.log('boxOfBool: null');
  } else {
    Console.log('boxOfBool: ' + boxOfBool.value.toString());
  }
  Console.log('==============');
  return user;
}

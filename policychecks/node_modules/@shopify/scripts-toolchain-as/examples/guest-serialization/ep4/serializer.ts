// ===================================================================================
// THIS FILE IS GENERATED BY A CUSTOM CODE GENERATION TOOL. DO NOT MODIFY IT MANUALLY.
// TO UPDATE THIS FILE, RUN "npm run codegen"
// ===================================================================================
import {Decoder, Encoder, Writer, Sizer} from '@shopify/scripts-sdk-as';
import {EPHandler} from './interface';
import {User} from './user';
import {Box} from '@shopify/scripts-sdk-as';

export function wrapper(inputBuffer: ArrayBuffer): ArrayBuffer {
  const decoder = new Decoder(inputBuffer);
  const input = changetype<__Input>(__InputSerializer.decode(decoder));

  const ret = EPHandler(input.user, input.boxOfNumber, input.boxOfBool);
  const output = new __Output(ret);

  const serializer = changetype<__OutputSerializer>(output);
  const outputBufferLen = serializer.bufferLen();
  const outputBuffer = new ArrayBuffer(outputBufferLen);
  serializer.encode(new Encoder(outputBuffer));

  return outputBuffer;
}

class __Input {
  user: User;
  boxOfNumber: Box<u64> | null;
  boxOfBool: Box<bool>;
}

class __InputSerializer {
  user: User = changetype<User>(new UserSerializer());
  boxOfNumber: Box<u64> | null = null;
  boxOfBool: Box<bool> = changetype<Box<bool>>(new BoxSerializer<bool>());

  bufferLen(): u32 {
    const sizer = new Sizer();
    this.encode(sizer);
    return sizer.length;
  }

  encode(writer: Writer): void {
    writer.writeMapSize(3);
    writer.writeString('user');
    changetype<UserSerializer>(this.user).encode(writer);
    writer.writeString('box_of_number');
    if (this.boxOfNumber === null) {
      writer.writeNil();
    } else {
      changetype<BoxSerializer<u64>>(this.boxOfNumber).encode(writer);
    }
    writer.writeString('box_of_bool');
    changetype<BoxSerializer<bool>>(this.boxOfBool).encode(writer);
  }

  static decode(__reader__: Decoder): __InputSerializer {
    let user: User = changetype<User>(new UserSerializer());
    let boxOfNumber: Box<u64> | null = null;
    let boxOfBool: Box<bool> = changetype<Box<bool>>(new BoxSerializer<bool>());

    let __numFields__ = __reader__.readMapSize();
    while (__numFields__ > 0) {
      __numFields__--;
      const __field__ = __reader__.readString();
      if (__field__ == 'user') {
        user = changetype<User>(UserSerializer.decode(__reader__));
      } else if (__field__ == 'box_of_number') {
        if (__reader__.isNextNil()) {
          boxOfNumber = null;
        } else {
          boxOfNumber = changetype<Box<u64>>(BoxSerializer.decode<u64>(__reader__));
        }
      } else if (__field__ == 'box_of_bool') {
        boxOfBool = changetype<Box<bool>>(BoxSerializer.decode<bool>(__reader__));
      } else {
        __reader__.skip();
      }
    }
    return {user, boxOfNumber, boxOfBool};
  }
}

class __Output {
  inner: User;
  constructor(
    inner: User,
  ) {
    this.inner = inner;
  }
}

class __OutputSerializer {
  inner: User = changetype<User>(new UserSerializer());

  bufferLen(): u32 {
    const sizer = new Sizer();
    this.encode(sizer);
    return sizer.length;
  }

  encode(writer: Writer): void {
    changetype<UserSerializer>(this.inner).encode(writer);
  }
}

class UserSerializer {
  bar: String = '';
  baz: String = '';

  bufferLen(): u32 {
    const sizer = new Sizer();
    this.encode(sizer);
    return sizer.length;
  }

  encode(writer: Writer): void {
    writer.writeMapSize(1);
    writer.writeString('foo');
    writer.writeString(this.bar);
  }

  static decode(__reader__: Decoder): UserSerializer {
    let bar: String = '';
    let baz: String = '';

    let __numFields__ = __reader__.readMapSize();
    while (__numFields__ > 0) {
      __numFields__--;
      const __field__ = __reader__.readString();
      if (__field__ == 'foo') {
        bar = __reader__.readString();
      } else {
        __reader__.skip();
      }
    }
    return {bar, baz};
  }
}

class BoxSerializer<T> {
  value: T;

  bufferLen(): u32 {
    const sizer = new Sizer();
    this.encode(sizer);
    return sizer.length;
  }

  encode(writer: Writer): void {
    if (this.value instanceof i8) {
      writer.writeInt8(<i8>this.value);
    } else if (this.value instanceof i16) {
      writer.writeInt16(<i16>this.value);
    } else if (this.value instanceof i32) {
      writer.writeInt32(<i32>this.value);
    } else if (this.value instanceof i64) {
      writer.writeInt64(<i64>this.value);
    } else if (this.value instanceof u8) {
      writer.writeUInt8(<u8>this.value);
    } else if (this.value instanceof u16) {
      writer.writeUInt16(<u16>this.value);
    } else if (this.value instanceof u32) {
      writer.writeUInt32(<u32>this.value);
    } else if (this.value instanceof u64) {
      writer.writeUInt64(<u64>this.value);
    } else if (this.value instanceof f32) {
      writer.writeFloat32(<f32>this.value);
    } else if (this.value instanceof f64) {
      writer.writeFloat64(<f64>this.value);
    } else if (this.value instanceof bool) {
      writer.writeBool(<bool>this.value);
    } else {
      throw new Error('Unexpected field type for Box<T>');
    }
  }

  static decode<T>(__reader__: Decoder): BoxSerializer<T> {
    let value: T;

    if (value instanceof i8) {
      value = __reader__.readInt8();
    } else if (value instanceof i16) {
      value = __reader__.readInt16();
    } else if (value instanceof i32) {
      value = __reader__.readInt32();
    } else if (value instanceof i64) {
      value = __reader__.readInt64();
    } else if (value instanceof u8) {
      value = __reader__.readUInt8();
    } else if (value instanceof u16) {
      value = __reader__.readUInt16();
    } else if (value instanceof u32) {
      value = __reader__.readUInt32();
    } else if (value instanceof u64) {
      value = __reader__.readUInt64();
    } else if (value instanceof f32) {
      value = __reader__.readFloat32();
    } else if (value instanceof f64) {
      value = __reader__.readFloat64();
    } else if (value instanceof bool) {
      value = __reader__.readBool();
    } else {
      throw new Error('Unexpected field type for Box<T>');
    }
    return {value};
  }
}

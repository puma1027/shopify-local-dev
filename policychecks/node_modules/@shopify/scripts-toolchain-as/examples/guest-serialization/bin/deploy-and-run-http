#!/usr/bin/env ruby

require "msgpack"
require "json"
require "base64"

def wrap_input(ep)
  puts "==> wrap input"
  input = JSON.parse(File.read("./input.#{ep}.json"))
  puts "read from input.#{ep}.json"
  metadata = {}

  wrapped_input = {
    timeout_in_ms: 100,
    # strict_encode64 needed
    input: Base64.strict_encode64(input.to_msgpack),
    metadata: metadata
  }

  File.write("wrapped_input.#{ep}.json", wrapped_input.to_json)
  puts "write to wrapped_input.#{ep}.json"
end

def deploy
  puts "==> deploy"
  moduleid=`curl -s -F wasm=@./build/script.wasm http://localhost:19989/v2/module/ | jq -r '.uuid'`
  puts moduleid
  return moduleid
end

def run(ep, moduleid)
  puts "==> run"
  command = <<~HERE
    curl -s \
      --header "Content-Type: application/json" \
      --data-binary @./wrapped_input.#{ep}.json \
      --request POST \
      http://localhost:19989/v2/module/#{moduleid}
  HERE
  resp = `#{command}`
  puts MessagePack.unpack(Base64::strict_decode64(JSON.parse(resp)["output"]))
end

def getEP!
  raise "ep argument requires. Eg. bin/codegen ep1" if ARGV.count == 0
  raise "only one argument is taken. Eg. bin/codegen ep1" unless ARGV.count == 1
  ep = ARGV[0].strip
  raise "#{ep} is not found from ./#{ep}" unless Dir.exists?(ep)
  return ep
end

ep = getEP!
wrap_input(ep)
moduleid = deploy
run(ep, moduleid)

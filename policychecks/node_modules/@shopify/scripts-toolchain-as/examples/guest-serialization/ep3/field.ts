type Int = i32;
export class Field {
  // - use `@shopify_transient` to mark transient fields
  // - no default values required, codegen deserialization would auto fill in default values
  //   for all types
  public num: i32;
  flag: boolean;
  private key: string;

  @shopify_transient
  private transientKey: string;

  listOfNum: Array<i32>;
  tag: Tag;

  @shopify_transient
  transientTag: Tag;

  map: Map<string, i32>;
  mapOfArrayValue: Map<string, Array<i32>>;
  mapOfMapValue: Map<string, Map<string, i32>>;
  mapOfTag: Map<string, Tag>;
  // Not allowed for non-string type keys
  // map2: Map<i32, i32>;
  numInt: Int;
  f: f32;

  // no empty arg constructor required, since deserialization doesn't go through constructor anymore
  constructor(num: i32, key: string, transientKey: string, tag: Tag) {
    this.num = num;
    this.key = key;
    this.transientKey = transientKey;
    this.tag = tag;
  }
}

export class Fields {
  constructor(private readonly fields: Array<Field>) {}
}

export class Tag {
  // deserialization doesn't respect user-defined default value. Eg, if no value is sent over the
  // wire for name field, the value will set as ""
  name: string = 'default name';
  num: i32;
}

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const process = __importStar(require("process"));
const childProcess = __importStar(require("child_process"));
describe('codegen', () => {
    test.each(['ep1', 'ep2', 'ep3', 'ep4'])('is stable', async (ep) => {
        // This test will fork the current process and run the codegen as a seperate command.
        // If there's any changes that are not commited, the serializers generated are out of
        // date and will need to be updated.
        const opts = {
            cwd: path.join(process.cwd(), 'examples/guest-serialization'),
        };
        childProcess.execSync(`bin/codegen ${ep}`, opts);
        if (process.env.CI) {
            childProcess.execSync(`git diff --exit-code`);
        }
    });
});
//# sourceMappingURL=codegen.test.js.map
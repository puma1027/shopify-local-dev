"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.build = void 0;
const metadata_1 = require("./metadata");
const fs_1 = __importDefault(require("fs"));
const asc_1 = __importDefault(require("assemblyscript/cli/asc"));
const path = __importStar(require("path"));
const METAFILE_MODULE = path.join(__dirname, '../template/__shopify_meta');
const METAFILE = `${METAFILE_MODULE}.ts`;
function build(argv) {
    const binaryFile = path.join(process.cwd(), argv.binary);
    const metadataFile = argv.metadata && path.join(process.cwd(), argv.metadata);
    let ascArgs = [
        argv.src,
        METAFILE,
        '--use',
        `abort=${path.relative(process.cwd(), METAFILE_MODULE)}/abort`,
        '--runtime',
        'stub',
        '--binaryFile',
        argv.binary,
    ];
    ascArgs = ascArgs.concat(argv._.filter((param) => param !== 'build'));
    if (argv.snapshot) {
        snapshotCompare(binaryFile, ascArgs);
    }
    else {
        ascCompile(ascArgs, () => {
            if (metadataFile) {
                const metadata = metadata_1.getMetadata(argv.ep, argv.domain);
                fs_1.default.writeFileSync(metadataFile, JSON.stringify(metadata));
            }
            console.log(`Build Successful.`);
            console.log(`Binary: ${binaryFile}`);
            if (metadataFile) {
                console.log(`Metadata: ${metadataFile}`);
            }
        });
    }
}
exports.build = build;
function snapshotCompare(binaryFile, ascArgs) {
    const expectedBinary = fs_1.default.readFileSync(binaryFile);
    ascCompile(ascArgs, () => {
        console.log('Comparing build against snapshot..');
        const actualBinary = fs_1.default.readFileSync(binaryFile);
        let success = true;
        if (Buffer.compare(actualBinary, expectedBinary) == -1) {
            console.log('Outputted Binary does not match snapshot');
            fs_1.default.writeFileSync(binaryFile, expectedBinary);
            success = false;
        }
        if (success) {
            console.log('Build snapshot matches');
        }
        else {
            process.exit(1);
        }
    });
}
function ascCompile(ascArgs, callback) {
    asc_1.default.ready.then(() => {
        asc_1.default.main(ascArgs, {
            stdout: process.stdout,
            stderr: process.stderr,
        }, function (err) {
            if (err)
                throw err;
            callback();
            return 0;
        });
    });
}
//# sourceMappingURL=build.js.map
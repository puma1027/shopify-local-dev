"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.codegen = void 0;
const fs_1 = require("fs");
const asc = __importStar(require("assemblyscript/cli/asc"));
const path = __importStar(require("path"));
const gs_class_field_1 = require("./guest-serialization/gs-class-field");
// Codegen InputWrapper and OutputWrapper to tmp/io-wrapper.ts
async function codegenInputWrapper(argv) {
    const GSIOTransformer = path.join(__dirname, '../dist/guest-serialization/gs-io-transformer.js');
    const ascArgs = [
        argv.interfaceDefinition,
        '--runtime',
        'stub',
        '--transform',
        GSIOTransformer,
        '--binaryFile',
        'tmp/codegen.wasm',
    ];
    console.log(`  ascArgs: ${ascArgs}`);
    await asc.ready;
    const flag = asc.main(ascArgs, {
        stdout: process.stdout,
        stderr: process.stderr,
    });
    if (flag !== 0) {
        throw new Error('codegen failed to generate input wrapper');
    }
    const ioWrapperDest = path.join(process.cwd(), path.dirname(argv.interfaceDefinition), 'io-wrapper.ts');
    fs_1.copyFileSync('tmp/io-wrapper.ts', ioWrapperDest);
}
async function codegen(argv) {
    // Massive hack to set the `CWD = location of serializer.ts` file is going to be generated.
    const dest = path.join(process.cwd(), path.dirname(argv.interfaceDefinition));
    gs_class_field_1.GSClassField.serializerDir = dest;
    await codegenInputWrapper(argv);
    const GSTransformer = path.join(__dirname, '../dist/guest-serialization/gs-transformer.js');
    const ioWrapperLocation = path.join(dest, 'io-wrapper.ts');
    const ascArgs = [
        argv.interfaceDefinition,
        ioWrapperLocation,
        '--runtime',
        'stub',
        '--transform',
        GSTransformer,
        '--binaryFile',
        'tmp/codegen.wasm',
    ];
    console.log(`  ascArgs: ${ascArgs}`);
    await asc.ready;
    const flag = await asc.main(ascArgs, {
        stdout: process.stdout,
        stderr: process.stderr,
    });
    if (flag !== 0) {
        console.log(`codegen failed`);
        return;
    }
    try {
        // cleanup the intermediate file.
        fs_1.unlinkSync(ioWrapperLocation);
    }
    catch (_err) {
        // noop
    }
    const serializerDest = path.join(dest, 'serializer.ts');
    fs_1.copyFileSync('tmp/serializer.ts', serializerDest);
    console.log(`codegen finish successfully: ${serializerDest}`);
}
exports.codegen = codegen;
//# sourceMappingURL=codegen.js.map
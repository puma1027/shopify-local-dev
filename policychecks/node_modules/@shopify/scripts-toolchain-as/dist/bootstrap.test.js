"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const bootstrap_1 = require("./bootstrap");
const fse = __importStar(require("fs-extra"));
describe('bootstrap', () => {
    beforeEach(() => {
        jest.resetAllMocks();
    });
    it('errors if the specified bootstrap location does not exist', () => {
        const proc = process;
        const exit = jest.fn();
        global.process.exit = exit;
        fse.existsSync.mockImplementation(() => false);
        bootstrap_1.bootstrap({ from: 'foo', dest: './' });
        expect(exit).toHaveBeenCalledWith(1);
        global.process = proc;
    });
    describe('when no domain is given', () => {
        it('copies the extension point template from the legacy path into the specified dest directory', () => {
            fse.existsSync.mockImplementation(() => true);
            bootstrap_1.bootstrap({ from: 'discount', dest: './' });
            expect(fse.copySync).toHaveBeenCalledWith('./node_modules/@shopify/extension-point-as-discount/assembly/sample', './');
        });
    });
    describe('when a domain is given', () => {
        it('copies the extension point template from the given domain into the specified dest directory', () => {
            fse.existsSync.mockImplementation(() => true);
            bootstrap_1.bootstrap({ from: 'shipping-methods', dest: './', domain: 'checkout' });
            expect(fse.copySync).toHaveBeenCalledWith('./node_modules/@shopify/scripts-checkout-apis/samples/shipping-methods', './');
        });
    });
});
//# sourceMappingURL=bootstrap.test.js.map
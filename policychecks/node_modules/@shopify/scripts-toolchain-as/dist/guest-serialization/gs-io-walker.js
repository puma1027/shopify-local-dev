"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GSIOWalker = void 0;
const gs_field_1 = require("./gs-field");
const INTERFACE = 'interface/EPInterface';
const HANDLER = 'interface/EPHandler';
function searchElement(program, target) {
    const keys = program.elementsByName.keys();
    for (const key of keys) {
        if (key.endsWith(target)) {
            return program.elementsByName.get(key);
        }
    }
    throw new Error(`${target} is not found`);
}
// This walker search through INTERFACE and HANDLER and save the input and output fields
class GSIOWalker {
    constructor(program) {
        this.inputFields = [];
        this.outputField = null;
        const epInterface = searchElement(program, INTERFACE);
        const epHandler = searchElement(program, HANDLER);
        if (!epHandler.type.isFunction) {
            throw new Error('EPHandler is not defined as function type');
        }
        const signature = epHandler.type.getSignature();
        const parameters = epInterface.typeNode.parameters;
        signature.parameterTypes.forEach((paramType, i) => {
            const paramName = parameters[i].name.text;
            this.inputFields.push(new gs_field_1.GSField(paramName, paramType));
        });
        const returnType = signature.returnType;
        this.outputField = new gs_field_1.GSField('', returnType);
    }
}
exports.GSIOWalker = GSIOWalker;
//# sourceMappingURL=gs-io-walker.js.map
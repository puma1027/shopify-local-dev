# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/theme-check/all/theme-check.rbi
#
# theme-check-1.9.0

module ThemeCheck
  def self.bug(message); end
  def self.debug?; end
  def self.debug_log_file; end
  def self.with_liquid_c_disabled; end
end
class ThemeCheck::ThemeCheckError < StandardError
end
class ThemeCheck::SchemaHelper
  def self.delete(hash, path); end
  def self.schema_corrector(schema, path, value); end
  def self.set(hash, path, value); end
end
class ThemeCheck::ThemeFileRewriter
  def initialize(name, source); end
  def insert_after(node, content, character_range = nil); end
  def insert_before(node, content, character_range = nil); end
  def range(start_index, end_index); end
  def remove(node); end
  def replace(node, content, character_range = nil); end
  def replace_inner_markup(node, content); end
  def to_s; end
  def wrap(node, insert_before, insert_after); end
end
class ThemeCheck::ThemeFile
  def ==(other); end
  def eql?(other); end
  def initialize(relative_path, storage); end
  def json?; end
  def liquid?; end
  def name; end
  def path; end
  def relative_path; end
  def source; end
  def storage; end
  def version; end
end
class ThemeCheck::LiquidFile < ThemeCheck::ThemeFile
  def liquid?; end
  def parse; end
  def rewriter; end
  def root; end
  def section?; end
  def self.parse(source); end
  def snippet?; end
  def source_excerpt(line); end
  def template?; end
  def warnings; end
  def write; end
end
class ThemeCheck::AssetFile < ThemeCheck::ThemeFile
  def gzipped_size; end
  def initialize(relative_path, storage); end
  def name; end
  def rewriter; end
  def write; end
end
class ThemeCheck::JsonFile < ThemeCheck::ThemeFile
  def content; end
  def initialize(relative_path, storage); end
  def json?; end
  def load!; end
  def parse_error; end
  def update_contents(new_content = nil); end
  def write; end
end
class ThemeCheck::Analyzer
  def analyze_files(files); end
  def analyze_theme; end
  def correct_offenses; end
  def finish; end
  def initialize(theme, checks = nil, auto_correct = nil); end
  def json_file_count; end
  def liquid_file_count; end
  def offenses; end
  def reset; end
  def total_file_count; end
  def uncorrectable_offenses; end
  def write_corrections; end
end
module ThemeCheck::JsonHelpers
  def format_json_parse_error(error); end
  def pretty_json(hash, start_level: nil, indent: nil); end
end
class ThemeCheck::Check
  def ==(other); end
  def add_offense(message, node: nil, theme_file: nil, markup: nil, line_number: nil, node_markup_offset: nil, &block); end
  def can_disable?; end
  def categories; end
  def code_name; end
  def doc; end
  def eql?(other); end
  def ignore!; end
  def ignored?; end
  def ignored_patterns; end
  def ignored_patterns=(arg0); end
  def offenses; end
  def offenses=(arg0); end
  def options; end
  def options=(arg0); end
  def self.all; end
  def self.can_disable(disableable = nil); end
  def self.categories(*categories); end
  def self.category(*categories); end
  def self.doc(doc = nil); end
  def self.docs_url(path); end
  def self.severity(severity = nil); end
  def self.severity_value(severity); end
  def self.single_file(single_file = nil); end
  def severity; end
  def severity=(severity); end
  def severity_value; end
  def single_file?; end
  def theme; end
  def theme=(arg0); end
  def to_s; end
  def whole_theme?; end
  include ThemeCheck::JsonHelpers
end
module ThemeCheck::ChecksTracking
  def inherited(klass); end
end
module ThemeCheck::ParsingHelpers
  def outside_of_strings(markup); end
end
class ThemeCheck::LiquidCheck < ThemeCheck::Check
  extend ThemeCheck::ChecksTracking
  include ThemeCheck::ParsingHelpers
end
class ThemeCheck::HtmlCheck < ThemeCheck::Check
  extend ThemeCheck::ChecksTracking
end
class ThemeCheck::JsonCheck < ThemeCheck::Check
  def add_offense(message, markup: nil, line_number: nil, theme_file: nil, &block); end
  extend ThemeCheck::ChecksTracking
end
class ThemeCheck::Cli
  def check(out_stream = nil); end
  def help; end
  def init; end
  def initialize; end
  def list; end
  def option_parser(parser = nil, help: nil); end
  def parse(argv); end
  def path; end
  def path=(arg0); end
  def print; end
  def print_with_format(theme, analyzer, out_stream); end
  def profile; end
  def run!; end
  def run; end
  def self.parse_and_run!(argv); end
  def self.parse_and_run(argv); end
  def version; end
end
class ThemeCheck::Cli::Abort < StandardError
end
class ThemeCheck::DisabledCheck
  def disabled?(index); end
  def end_index=(index); end
  def first_line; end
  def first_line=(arg0); end
  def initialize(theme_file, name); end
  def last; end
  def missing_end_index?; end
  def name; end
  def ranges; end
  def start_index=(index); end
  def theme_file; end
end
class ThemeCheck::DisabledChecks
  def checks_from_text(text); end
  def checks_missing_end_index; end
  def comment_text(node); end
  def disabled?(check, theme_file, check_name, index); end
  def initialize; end
  def remove_disabled_offenses(checks); end
  def start_disabling?(text); end
  def stop_disabling?(text); end
  def update(node); end
end
class ThemeCheck::LocaleDiff
  def add_as_offenses(check, key_prefix: nil, node: nil, theme_file: nil, schema: nil); end
  def add_missing_keys_offense(check, cause, missing_keys, key_prefix:, node: nil, theme_file: nil, schema: nil); end
  def extra_keys; end
  def format_keys(key_prefix, keys); end
  def initialize(default, other); end
  def missing_keys; end
  def pluralization?(hash); end
  def remove_extra_keys_offense(check, cause, extra_keys, key_prefix:, node: nil, theme_file: nil, schema: nil); end
  def system_translations(path); end
  def visit_object(default, other, path); end
end
class ThemeCheck::RemoteAssetFile
  def content; end
  def gzipped_size; end
  def initialize(src); end
  def self.cache; end
  def self.from_src(src); end
  def self.uri(src); end
end
module ThemeCheck::RegexHelpers
  def matches(s, re); end
end
module ThemeCheck::PositionHelper
  def bounded(a, x, b); end
  def from_index_to_row_column(content, index); end
  def from_row_column_to_index(content, row, col); end
end
class ThemeCheck::Position
  def can_find_needle?; end
  def compute_start_offset; end
  def content_line_count; end
  def contents; end
  def end_column; end
  def end_index; end
  def end_row; end
  def entire_line_needle; end
  def has_content_and_line_number_but_no_needle?; end
  def initialize(needle_arg, contents_arg, line_number_1_indexed: nil, node_markup: nil, node_markup_offset: nil); end
  def line_number; end
  def needle; end
  def start_column; end
  def start_index; end
  def start_line_offset; end
  def start_offset; end
  def start_row; end
  def strict_position; end
  include ThemeCheck::PositionHelper
end
class ThemeCheck::StrictPosition
  def contents; end
  def end_column; end
  def end_index; end
  def end_row; end
  def end_row_column; end
  def initialize(needle, contents, start_index); end
  def needle; end
  def start_column; end
  def start_index; end
  def start_row; end
  def start_row_column; end
  include ThemeCheck::PositionHelper
end
class ThemeCheck::Checks < Array
  def call(method, *args); end
  def call_check_method(check, method, *args); end
  def disableable; end
  def single_file; end
  def whole_theme; end
end
class ThemeCheck::Config
  def [](name); end
  def auto_correct; end
  def auto_correct=(arg0); end
  def check_configurations; end
  def check_name?(name); end
  def enabled_checks; end
  def exclude_categories; end
  def exclude_categories=(categories); end
  def ignored_patterns; end
  def include_categories; end
  def include_categories=(categories); end
  def initialize(root: nil, configuration: nil, should_resolve_requires: nil); end
  def merge_configurations!(configuration, extended_configuration); end
  def resolve_requires; end
  def root; end
  def self.bundled_config_path(name); end
  def self.default; end
  def self.find(root, needle = nil); end
  def self.from_hash(config); end
  def self.from_path(path); end
  def self.from_string(config); end
  def self.last_loaded_config; end
  def self.load_bundled_config(name); end
  def self.load_config(path); end
  def self.load_file(absolute_path); end
  def to_h; end
  def validate_configuration(configuration, default_configuration = nil, parent_keys = nil); end
end
class ThemeCheck::Node
  def children; end
  def end_column; end
  def end_index; end
  def end_row; end
  def line_number; end
  def markup; end
  def parent; end
  def start_column; end
  def start_index; end
  def start_row; end
  def theme_file; end
  def value; end
end
module ThemeCheck::Tags
  def self.register_tag(name, klass); end
  def self.register_tags!; end
  def self.register_tags=(arg0); end
  def self.register_tags?; end
end
class ThemeCheck::Tags::Section < Liquid::Tag
  def initialize(tag_name, markup, options); end
  def section_name; end
end
class ThemeCheck::Tags::Form < Liquid::Block
  def initialize(tag_name, markup, options); end
  def tag_attributes; end
  def type_expr; end
  def variable_name_expr; end
end
class ThemeCheck::Tags::Form::ParseTreeVisitor < Liquid::ParseTreeVisitor
  def children; end
end
class ThemeCheck::Tags::Paginate < Liquid::Block
  def initialize(tag_name, markup, options); end
  def page_size; end
end
class ThemeCheck::Tags::Paginate::ParseTreeVisitor < Liquid::ParseTreeVisitor
  def children; end
end
class ThemeCheck::Tags::Layout < Liquid::Tag
  def initialize(tag_name, markup, tokens); end
  def layout_expr; end
end
class ThemeCheck::Tags::Layout::ParseTreeVisitor < Liquid::ParseTreeVisitor
  def children; end
end
class ThemeCheck::Tags::Render < Liquid::Tag
  def attributes; end
  def initialize(tag_name, markup, options); end
  def template_name_expr; end
  extend Liquid::Tag::Disabler::ClassMethods
end
class ThemeCheck::Tags::Render::ParseTreeVisitor < Liquid::ParseTreeVisitor
  def children; end
end
class ThemeCheck::Tags::Style < Liquid::Block
end
class ThemeCheck::Tags::Schema < Liquid::Raw
end
class ThemeCheck::Tags::Javascript < Liquid::Raw
end
class ThemeCheck::Tags::Stylesheet < Liquid::Raw
end
class ThemeCheck::LiquidNode < ThemeCheck::Node
  def assigned_or_echoed_variable?; end
  def backtrack_on_whitespace(string, start, whitespace = nil); end
  def block?; end
  def block_body?; end
  def block_end_end_index; end
  def block_end_markup; end
  def block_end_match; end
  def block_end_start_index; end
  def block_start_end_index; end
  def block_start_markup; end
  def block_start_start_index; end
  def block_tag?; end
  def children; end
  def comment?; end
  def document?; end
  def end_column; end
  def end_index; end
  def end_row; end
  def end_token; end
  def find_block_delimiter(start_index); end
  def initialize(value, parent, theme_file); end
  def inner_json; end
  def inner_markup; end
  def inner_markup_end_column; end
  def inner_markup_end_index; end
  def inner_markup_end_row; end
  def inner_markup_position; end
  def inner_markup_start_column; end
  def inner_markup_start_index; end
  def inner_markup_start_row; end
  def inside_liquid_tag?; end
  def line_number; end
  def literal?; end
  def markup; end
  def markup=(markup); end
  def outer_markup; end
  def outer_markup_end_column; end
  def outer_markup_end_index; end
  def outer_markup_end_row; end
  def outer_markup_position; end
  def outer_markup_start_column; end
  def outer_markup_start_index; end
  def outer_markup_start_row; end
  def parent; end
  def position; end
  def root?; end
  def schema?; end
  def source; end
  def start_column; end
  def start_index; end
  def start_row; end
  def start_token; end
  def tag?; end
  def tag_markup; end
  def theme_file; end
  def type_name; end
  def value; end
  def variable?; end
  def variable_lookup?; end
  def whitespace_trimmed_end?; end
  def whitespace_trimmed_start?; end
end
class ThemeCheck::HtmlNode < ThemeCheck::Node
  def attributes; end
  def children; end
  def content; end
  def element?; end
  def end_column; end
  def end_index; end
  def end_row; end
  def initialize(value, theme_file, placeholder_values, parseable_source, parent = nil); end
  def line_number; end
  def literal?; end
  def markup; end
  def name; end
  def parent; end
  def parseable_markup; end
  def position; end
  def replace_placeholders(string); end
  def self.parse(liquid_file); end
  def start_column; end
  def start_index; end
  def start_row; end
  def theme_file; end
  def value; end
  extend Forwardable
  include ThemeCheck::PositionHelper
  include ThemeCheck::RegexHelpers
end
class ThemeCheck::Offense
  def ==(other); end
  def check; end
  def check_name; end
  def code_name; end
  def correct(corrector = nil); end
  def correctable?; end
  def correction; end
  def doc; end
  def end_column; end
  def end_index; end
  def end_row; end
  def eql?(other); end
  def in_range?(other_range); end
  def initialize(check:, message: nil, theme_file: nil, node: nil, markup: nil, line_number: nil, node_markup_offset: nil, correction: nil); end
  def line_number; end
  def location; end
  def location_range; end
  def markup; end
  def markup_start_in_excerpt; end
  def message; end
  def node; end
  def range; end
  def severity; end
  def single_file?; end
  def source_excerpt; end
  def start_column; end
  def start_index; end
  def start_row; end
  def theme_file; end
  def to_h; end
  def to_s; end
  def to_s_range; end
  def version; end
  def whole_theme?; end
  include ThemeCheck::PositionHelper
end
class ThemeCheck::Printer
  def blue(str); end
  def colorize(str, color_code); end
  def colorized_severity(severity); end
  def green(str); end
  def initialize(out_stream = nil); end
  def light_blue(str); end
  def pink(str); end
  def print(theme, offenses, auto_correct); end
  def print_offense(offense, auto_correct); end
  def red(str); end
  def yellow(str); end
end
class ThemeCheck::JsonPrinter
  def initialize(out_stream = nil); end
  def offenses_by_path(offenses); end
  def print(offenses); end
end
module ThemeCheck::ShopifyLiquid
end
module ThemeCheck::ShopifyLiquid::DeprecatedFilter
  def all; end
  def alternatives(filter); end
  def labels; end
  extend ThemeCheck::ShopifyLiquid::DeprecatedFilter
end
module ThemeCheck::ShopifyLiquid::Filter
  def labels; end
  extend ThemeCheck::ShopifyLiquid::Filter
end
module ThemeCheck::ShopifyLiquid::Object
  def labels; end
  def plus_labels; end
  extend ThemeCheck::ShopifyLiquid::Object
end
module ThemeCheck::ShopifyLiquid::Tag
  def end_labels; end
  def labels; end
  def liquid_tag_regex(tag); end
  def tag_regex(tag); end
  def tags_file_contents; end
  def to_label(label); end
  extend ThemeCheck::ShopifyLiquid::Tag
end
module ThemeCheck::ShopifyLiquid::SystemTranslations
  def dig_set(obj, keys, value); end
  def include?(key); end
  def translations; end
  def translations_hash; end
  extend ThemeCheck::ShopifyLiquid::SystemTranslations
end
module ThemeCheck::StringHelpers
  def demodulize(path); end
  def underscore(camel_cased_word); end
  extend ThemeCheck::StringHelpers
end
class ThemeCheck::Storage
  def directories; end
  def files; end
  def path(relative_path); end
  def read(relative_path); end
  def versioned?; end
  def write(relative_path, content); end
end
class ThemeCheck::FileSystemStorage < ThemeCheck::Storage
  def directories; end
  def file(name); end
  def file_exists?(relative_path); end
  def files; end
  def glob(pattern); end
  def initialize(root, ignored_patterns: nil); end
  def mkdir(relative_path); end
  def path(relative_path); end
  def read(relative_path); end
  def relative_path(absolute_path); end
  def remove(relative_path); end
  def reset_memoizers; end
  def root; end
  def write(relative_path, content); end
end
class ThemeCheck::InMemoryStorage < ThemeCheck::Storage
  def directories; end
  def files; end
  def initialize(files = nil, root = nil); end
  def mkdir(relative_path); end
  def path(relative_path); end
  def read(relative_path); end
  def relative_path(absolute_path); end
  def remove(relative_path); end
  def reset_memoizers; end
  def root; end
  def write(relative_path, content); end
end
class ThemeCheck::Theme
  def [](name_or_relative_path); end
  def all; end
  def assets; end
  def default_locale; end
  def default_locale_json; end
  def default_locale_json=(arg0); end
  def directories; end
  def initialize(storage); end
  def json; end
  def liquid; end
  def sections; end
  def snippets; end
  def storage; end
  def templates; end
end
class ThemeCheck::Corrector
  def add_translation(json_file, path, value); end
  def create_file(storage, relative_path, content); end
  def initialize(theme_file:); end
  def insert_after(node, content, character_range = nil); end
  def insert_before(node, content, character_range = nil); end
  def mkdir(storage, relative_path); end
  def remove(node); end
  def remove_file(storage, relative_path); end
  def remove_translation(json_file, path); end
  def replace(node, content, character_range = nil); end
  def replace_inner_json(node, json, **pretty_json_opts); end
  def replace_inner_markup(node, content); end
  def wrap(node, insert_before, insert_after); end
  include ThemeCheck::JsonHelpers
end
class ThemeCheck::LiquidVisitor
  def call_checks(method, *args); end
  def checks; end
  def initialize(checks, disabled_checks); end
  def visit(node); end
  def visit_liquid_file(liquid_file); end
end
class ThemeCheck::HtmlVisitor
  def call_checks(method, *args); end
  def checks; end
  def initialize(checks); end
  def visit(node); end
  def visit_liquid_file(liquid_file); end
end
module ThemeCheck::LanguageServer
  def self.partial_tag(tag); end
  def self.start; end
end
module ThemeCheck::LanguageServer::CompletionItemKinds
end
module ThemeCheck::LanguageServer::TextDocumentSyncKind
end
module ThemeCheck::LanguageServer::ErrorCodes
end
class ThemeCheck::LanguageServer::Configuration
  def check_on_change?; end
  def check_on_open?; end
  def check_on_save?; end
  def fetch(force: nil); end
  def initialize(bridge, capabilities); end
  def initialized?; end
  def register_did_change_capability; end
end
class ThemeCheck::LanguageServer::Channel
  def <<(value); end
  def close; end
  def id; end
  def initialize(id); end
  def pop; end
  def self.by_id(id); end
  def self.close(id); end
  def self.create; end
  def self.new_id; end
end
class ThemeCheck::LanguageServer::Messenger
  def close_input; end
  def close_output; end
  def log; end
  def read_message; end
  def send_message; end
end
class ThemeCheck::LanguageServer::IOMessenger < ThemeCheck::LanguageServer::Messenger
  def close_input; end
  def close_output; end
  def incompatible_stream_message; end
  def initial_line; end
  def initialize(in_stream: nil, out_stream: nil, err_stream: nil); end
  def log(message); end
  def read_message; end
  def self.err_stream; end
  def send_message(message_body); end
  def supported_io_classes; end
  def validate!(streams = nil); end
end
class ThemeCheck::LanguageServer::Bridge
  def initialize(messenger); end
  def log(message); end
  def read_message; end
  def receive_response(id, result); end
  def send_create_work_done_progress_request(token); end
  def send_internal_error(id, e); end
  def send_message(message_hash); end
  def send_notification(method, params); end
  def send_progress(token, value); end
  def send_request(method, params = nil); end
  def send_response(id, result = nil, error = nil); end
  def send_work_done_progress_begin(token, title); end
  def send_work_done_progress_end(token, message); end
  def send_work_done_progress_report(token, message, percentage); end
  def supports_work_done_progress=(arg0); end
  def supports_work_done_progress?; end
end
module ThemeCheck::LanguageServer::URIHelper
  def file_path(uri_string); end
  def file_uri(absolute_path); end
end
class ThemeCheck::LanguageServer::DoneStreaming < StandardError
end
class ThemeCheck::LanguageServer::IncompatibleStream < StandardError
end
class ThemeCheck::LanguageServer::Server
  def cleanup(status_code); end
  def handle_message(message); end
  def handle_response(message); end
  def handler; end
  def initialize(messenger:, should_raise_errors: nil, number_of_threads: nil); end
  def listen; end
  def should_raise_errors; end
  def start_handler_threads; end
  def start_json_rpc_thread; end
  def status_code_from_error(e); end
  def to_snake_case(method_name); end
end
class ThemeCheck::Token < Struct
  def content; end
  def content=(_); end
  def end; end
  def end=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def start; end
  def start=(_); end
end
class ThemeCheck::Tokens
  def each(&block); end
  def initialize(buffer); end
  include Enumerable
end
module ThemeCheck::LanguageServer::VariableLookupFinder
  def cursor_is_on_bracket_position_that_cant_be_completed(content, cursor); end
  def cursor_is_on_liquid_tag_lookup_position(content, cursor); end
  def cursor_is_on_liquid_variable_lookup_position(content, cursor); end
  def empty_lookup; end
  def last_filter_argument(filters); end
  def lookup(content, cursor); end
  def lookup_liquid_tag(content, cursor); end
  def lookup_liquid_variable(content, cursor); end
  def parseable_markup(content, cursor); end
  def tag_regex(tag); end
  def variable_from_markup(markup, parse_context = nil); end
  def variable_lookup_for_assign_tag(assign_tag); end
  def variable_lookup_for_case_block(condition); end
  def variable_lookup_for_case_tag(case_tag); end
  def variable_lookup_for_condition(condition); end
  def variable_lookup_for_cycle_tag(cycle_tag); end
  def variable_lookup_for_echo_tag(echo_tag); end
  def variable_lookup_for_for_tag(for_tag); end
  def variable_lookup_for_if_tag(if_tag); end
  def variable_lookup_for_liquid_variable(variable); end
  def variable_lookup_for_render_tag(render_tag); end
  def variable_lookup_for_tablerow_tag(tablerow_tag); end
  extend ThemeCheck::LanguageServer::VariableLookupFinder
end
class ThemeCheck::LanguageServer::Diagnostic
  def ==(other); end
  def absolute_path; end
  def code; end
  def code_description; end
  def correctable?; end
  def data; end
  def end_index; end
  def file_version; end
  def initialize(offense); end
  def message; end
  def offense; end
  def range; end
  def relative_path; end
  def severity; end
  def single_file?; end
  def start_index; end
  def to_h; end
  def to_s; end
  def uri; end
  include ThemeCheck::LanguageServer::URIHelper
end
class ThemeCheck::LanguageServer::DiagnosticsManager
  def build_diagnostics(offenses, analyzed_files: nil); end
  def delete(relative_path, diagnostic); end
  def delete_applied(diagnostics); end
  def diagnostics(relative_path); end
  def document_changes(diagnostics); end
  def find(diagnostic_hash); end
  def first_run?; end
  def initialize; end
  def paths(diagnostics); end
  def sanitize(diagnostics); end
  def single_file_diagnostics(relative_path); end
  def workspace_edit(diagnostics); end
end
class ThemeCheck::LanguageServer::DiagnosticsEngine
  def analyze_and_send_offenses(absolute_path, config, force: nil); end
  def first_run?; end
  def initialize(storage, bridge, diagnostics_manager = nil); end
  def send_diagnostic(relative_path, diagnostics); end
  def send_diagnostics(offenses, analyzed_files = nil); end
  def storage; end
  include ThemeCheck::LanguageServer::URIHelper
end
class ThemeCheck::LanguageServer::DocumentChangeCorrector
  def absolute_path(node); end
  def add_translation(file, path, value); end
  def apply_json_edits; end
  def apply_json_file_edits; end
  def character_range_position(node, character_range); end
  def create_file(storage, relative_path, contents = nil, overwrite: nil); end
  def create_file_change(uri, overwrite = nil); end
  def delete_file_change(uri); end
  def document_changes; end
  def edits(node); end
  def end_location(node); end
  def initialize; end
  def insert_after(node, content, character_range = nil); end
  def insert_before(node, content, character_range = nil); end
  def mkdir(storage, relative_path); end
  def range(node); end
  def remove(node); end
  def remove_file(storage, relative_path); end
  def remove_translation(file, path); end
  def replace(node, content, character_range = nil); end
  def replace_entire_file(file, contents); end
  def replace_inner_json(node, json, **pretty_json_opts); end
  def replace_inner_markup(node, content); end
  def start_location(node); end
  def text_document_edit(node); end
  def to_text_document(thing); end
  def wrap(node, insert_before, insert_after); end
  include ThemeCheck::JsonHelpers
  include ThemeCheck::LanguageServer::URIHelper
end
class ThemeCheck::VersionedInMemoryStorage < ThemeCheck::InMemoryStorage
  def initialize(files, root = nil); end
  def read_version(relative_path); end
  def version(relative_path); end
  def versioned?; end
  def versions; end
  def write(relative_path, content, version); end
end
class ThemeCheck::VersionedInMemoryStorage::Version < Struct
  def id; end
  def id=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def version; end
  def version=(_); end
end
class ThemeCheck::LanguageServer::ClientCapabilities
  def initialization_option(key); end
  def initialize(capabilities); end
  def supports_work_done_progress?; end
  def supports_workspace_configuration?; end
  def supports_workspace_did_change_configuration_dynamic_registration?; end
end
module ThemeCheck::LanguageServer::CompletionHelper
  def cursor_on_first_word?(content, cursor); end
  def cursor_on_start_content?(content, cursor, regex); end
  def first_word(content); end
end
class ThemeCheck::LanguageServer::CompletionProvider
  def completions(content, cursor); end
  def initialize(storage = nil); end
  def self.all; end
  def self.inherited(subclass); end
  include ThemeCheck::LanguageServer::CompletionHelper
  include ThemeCheck::RegexHelpers
end
class ThemeCheck::LanguageServer::CompletionEngine
  def completions(relative_path, line, col); end
  def find_token(buffer, cursor); end
  def initialize(storage); end
  include ThemeCheck::PositionHelper
end
class ThemeCheck::LanguageServer::FilterCompletionProvider < ThemeCheck::LanguageServer::CompletionProvider
  def available_labels; end
  def can_complete?(content, cursor); end
  def completions(content, cursor); end
  def cursor_on_filter?(content, cursor); end
  def filter_to_completion(filter); end
  def partial(content, cursor); end
end
class ThemeCheck::LanguageServer::ObjectCompletionProvider < ThemeCheck::LanguageServer::CompletionProvider
  def completions(content, cursor); end
  def object_to_completion(object); end
  def partial(variable_lookup); end
  def variable_lookup_at_cursor(content, cursor); end
end
class ThemeCheck::LanguageServer::TagCompletionProvider < ThemeCheck::LanguageServer::CompletionProvider
  def can_complete?(content, cursor); end
  def completions(content, cursor); end
  def tag_to_completion(tag); end
end
class ThemeCheck::LanguageServer::RenderSnippetCompletionProvider < ThemeCheck::LanguageServer::CompletionProvider
  def completions(content, cursor); end
  def cursor_on_quoted_argument?(content, cursor); end
  def snippet(content); end
  def snippet_to_completion(file); end
  def snippets; end
end
class ThemeCheck::LanguageServer::DocumentLinkProvider
  def destination_directory; end
  def destination_postfix; end
  def document_links(buffer); end
  def file_link(partial); end
  def initialize(storage = nil); end
  def partial_regexp; end
  def self.all; end
  def self.destination_directory; end
  def self.destination_directory=(arg0); end
  def self.destination_postfix; end
  def self.destination_postfix=(arg0); end
  def self.inherited(subclass); end
  def self.partial_regexp; end
  def self.partial_regexp=(arg0); end
  include ThemeCheck::LanguageServer::URIHelper
  include ThemeCheck::PositionHelper
  include ThemeCheck::RegexHelpers
end
class ThemeCheck::LanguageServer::DocumentLinkEngine
  def document_links(relative_path); end
  def initialize(storage); end
end
class ThemeCheck::LanguageServer::SectionDocumentLinkProvider < ThemeCheck::LanguageServer::DocumentLinkProvider
end
class ThemeCheck::LanguageServer::RenderDocumentLinkProvider < ThemeCheck::LanguageServer::DocumentLinkProvider
end
class ThemeCheck::LanguageServer::AssetDocumentLinkProvider < ThemeCheck::LanguageServer::DocumentLinkProvider
end
class ThemeCheck::LanguageServer::IncludeDocumentLinkProvider < ThemeCheck::LanguageServer::DocumentLinkProvider
end
class ThemeCheck::LanguageServer::ExecuteCommandProvider
  def command; end
  def execute(arguments); end
  def self.all; end
  def self.command(cmd = nil); end
  def self.inherited(subclass); end
end
class ThemeCheck::LanguageServer::ExecuteCommandEngine
  def <<(provider); end
  def execute(command, arguments); end
  def initialize; end
end
class ThemeCheck::LanguageServer::CorrectionExecuteCommandProvider < ThemeCheck::LanguageServer::ExecuteCommandProvider
  def bridge; end
  def diagnostics_manager; end
  def execute(diagnostic_hashes); end
  def initialize(storage, bridge, diagnostics_manager); end
  def storage; end
  include ThemeCheck::LanguageServer::URIHelper
end
class ThemeCheck::LanguageServer::RunChecksExecuteCommandProvider < ThemeCheck::LanguageServer::ExecuteCommandProvider
  def execute(_args); end
  def initialize(diagnostics_engine, root_path, root_config); end
  include ThemeCheck::LanguageServer::URIHelper
end
class ThemeCheck::LanguageServer::CodeActionProvider
  def base_kind; end
  def code_actions(relative_path, range); end
  def diagnostics_manager; end
  def initialize(storage, diagnostics_manager); end
  def kind; end
  def self.all; end
  def self.inherited(subclass); end
  def self.kind(k = nil); end
  def storage; end
end
class ThemeCheck::LanguageServer::CodeActionEngine
  def code_actions(absolute_path, start_position, end_position, only_kinds = nil); end
  def initialize(storage, diagnostics_manager); end
  include ThemeCheck::PositionHelper
end
class ThemeCheck::LanguageServer::QuickfixCodeActionProvider < ThemeCheck::LanguageServer::CodeActionProvider
  def code_actions(relative_path, range); end
  def quickfix_all_code_action(diagnostics); end
  def quickfix_all_of_type_code_actions(cursor_diagnostics, correctable_diagnostics); end
  def quickfix_cursor_code_actions(diagnostics); end
end
class ThemeCheck::LanguageServer::SourceFixAllCodeActionProvider < ThemeCheck::LanguageServer::CodeActionProvider
  def code_actions(relative_path, _); end
  def diagnostics_to_code_action(diagnostics); end
end
class ThemeCheck::LanguageServer::Handler
  def analyze_and_send_offenses(absolute_path); end
  def close!; end
  def config_for_path(path); end
  def content_changes_text(params); end
  def in_memory_storage(root); end
  def initialize(bridge); end
  def log(message); end
  def on_exit(_id, _params); end
  def on_initialize(id, params); end
  def on_initialized(_id, _params); end
  def on_shutdown(id, _params); end
  def on_text_document_code_action(id, params); end
  def on_text_document_completion(id, params); end
  def on_text_document_did_change(_id, params); end
  def on_text_document_did_close(_id, params); end
  def on_text_document_did_open(_id, params); end
  def on_text_document_did_save(_id, params); end
  def on_text_document_document_link(id, params); end
  def on_workspace_did_change_configuration(_id, _params); end
  def on_workspace_execute_command(id, params); end
  def range_element(params, start_or_end); end
  def relative_path_from_text_document_uri(params); end
  def root_path_from_params(params); end
  def text_document_text(params); end
  def text_document_uri(params); end
  def text_document_version(params); end
  include ThemeCheck::LanguageServer::URIHelper
end
class ThemeCheck::AssetSizeCSS < ThemeCheck::HtmlCheck
  def href_to_file_size(href); end
  def initialize(threshold_in_bytes: nil); end
  def on_link(node); end
  def threshold_in_bytes; end
  include ThemeCheck::RegexHelpers
end
class ThemeCheck::AssetSizeAppBlockCSS < ThemeCheck::LiquidCheck
  def asset_size(name); end
  def initialize(threshold_in_bytes: nil); end
  def on_schema(node); end
  def threshold_in_bytes; end
end
class ThemeCheck::AssetSizeAppBlockJavaScript < ThemeCheck::LiquidCheck
  def asset_size(name); end
  def initialize(threshold_in_bytes: nil); end
  def on_schema(node); end
  def threshold_in_bytes; end
end
class ThemeCheck::UnusedSnippet < ThemeCheck::LiquidCheck
  def initialize; end
  def missing_snippets; end
  def on_end; end
  def on_include(node); end
  def on_render(node); end
end
class ThemeCheck::LiquidTag < ThemeCheck::LiquidCheck
  def after_document(_node); end
  def increment_consecutive_statements(node); end
  def initialize(min_consecutive_statements: nil); end
  def on_string(node); end
  def on_tag(node); end
  def reset_consecutive_statements; end
end
class ThemeCheck::MissingRequiredTemplateFiles < ThemeCheck::LiquidCheck
  def on_end; end
end
class ThemeCheck::ParserBlockingJavaScript < ThemeCheck::HtmlCheck
  def on_script(node); end
end
class ThemeCheck::MatchingSchemaTranslations < ThemeCheck::LiquidCheck
  def check_locales(schema, node:); end
  def on_schema(node); end
  def visit_object(object, top_path = nil, &block); end
end
class ThemeCheck::MissingTemplate < ThemeCheck::LiquidCheck
  def add_missing_offense(name, node:); end
  def ignore?(path); end
  def initialize(ignore_missing: nil); end
  def on_include(node); end
  def on_render(node); end
  def on_section(node); end
end
class ThemeCheck::DeprecateBgsizes < ThemeCheck::HtmlCheck
  def on_div(node); end
end
class ThemeCheck::ConvertIncludeToRender < ThemeCheck::LiquidCheck
  def on_include(node); end
end
class ThemeCheck::ValidSchema < ThemeCheck::LiquidCheck
  def on_schema(node); end
end
class ThemeCheck::UnknownFilter < ThemeCheck::LiquidCheck
  def on_variable(node); end
end
class ThemeCheck::ContentForHeaderModification < ThemeCheck::LiquidCheck
  def after_assign(_node); end
  def after_capture(_node); end
  def initialize; end
  def on_assign(_node); end
  def on_capture(_node); end
  def on_variable(node); end
end
class ThemeCheck::HtmlParsingError < ThemeCheck::HtmlCheck
  def on_parse_error(exception, theme_file); end
end
class ThemeCheck::UnusedAssign < ThemeCheck::LiquidCheck
  def initialize; end
  def on_assign(node); end
  def on_document(node); end
  def on_end; end
  def on_include(node); end
  def on_variable_lookup(node); end
end
class Anonymous_Struct_4 < Struct
  def assign_nodes; end
  def assign_nodes=(_); end
  def includes; end
  def includes=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def used_assigns; end
  def used_assigns=(_); end
end
class ThemeCheck::UnusedAssign::TemplateInfo < Anonymous_Struct_4
  def collect_used_assigns(templates, visited = nil); end
end
class ThemeCheck::TemplateLength < ThemeCheck::LiquidCheck
  def after_document(node); end
  def exclude_node_lines(node); end
  def initialize(max_length: nil, exclude_schema: nil, exclude_stylesheet: nil, exclude_javascript: nil); end
  def on_document(_node); end
  def on_javascript(node); end
  def on_schema(node); end
  def on_stylesheet(node); end
end
class ThemeCheck::ValidHTMLTranslation < ThemeCheck::JsonCheck
  def html_key?(keys); end
  def on_file(file); end
  def parse_and_add_offense(key, value); end
  def visit_nested(value, keys = nil); end
end
class ThemeCheck::DeprecatedFilter < ThemeCheck::LiquidCheck
  def add_default_offense(node, filter, alternatives); end
  def add_img_url_offense(node); end
  def on_variable(node); end
end
class ThemeCheck::DeprecatedGlobalAppBlockType < ThemeCheck::LiquidCheck
  def block_types_from(schema); end
  def on_case(node); end
  def on_condition(node); end
  def on_schema(node); end
  def on_variable(node); end
  def report_offense(node); end
end
class ThemeCheck::RemoteAsset < ThemeCheck::HtmlCheck
  def on_element(node); end
  def url_hosted_by_shopify?(url); end
  def url_is_setting_variable?(url); end
end
class ThemeCheck::RequiredDirectories < ThemeCheck::LiquidCheck
  def add_missing_directories_offense(directory); end
  def on_end; end
end
class ThemeCheck::AssetSizeJavaScript < ThemeCheck::HtmlCheck
  def initialize(threshold_in_bytes: nil); end
  def on_script(node); end
  def src_to_file_size(src); end
  def threshold_in_bytes; end
  include ThemeCheck::RegexHelpers
end
class ThemeCheck::ImgWidthAndHeight < ThemeCheck::HtmlCheck
  def on_img(node); end
  def record_units_in_field_offenses(attribute, value, node:); end
end
class ThemeCheck::SyntaxError < ThemeCheck::LiquidCheck
  def add_exception_as_offense(exception, theme_file:); end
  def on_document(node); end
  def on_error(exception); end
end
class ThemeCheck::TranslationKeyExists < ThemeCheck::LiquidCheck
  def initialize; end
  def key_exists?(key, pointer); end
  def on_document(node); end
  def on_end; end
  def on_schema(node); end
  def on_variable(node); end
end
class ThemeCheck::AppBlockValidTags < ThemeCheck::LiquidCheck
  def on_include(node); end
  def on_javascript(node); end
  def on_layout(node); end
  def on_section(node); end
  def on_stylesheet(node); end
end
class ThemeCheck::ParserBlockingScriptTag < ThemeCheck::LiquidCheck
  def on_variable(node); end
end
class ThemeCheck::ValidJson < ThemeCheck::JsonCheck
  def on_file(file); end
end
class ThemeCheck::DeprecateLazysizes < ThemeCheck::HtmlCheck
  def on_img(node); end
end
class ThemeCheck::PaginationSize < ThemeCheck::LiquidCheck
  def after_document(_node); end
  def get_setting_default_value(variable_lookup); end
  def get_value(size); end
  def initialize(min_size: nil, max_size: nil); end
  def max_size; end
  def min_size; end
  def on_document(_node); end
  def on_paginate(node); end
  def on_schema(node); end
  def size_is_a_section_setting?(size); end
end
class ThemeCheck::ImgLazyLoading < ThemeCheck::HtmlCheck
  def on_img(node); end
end
class ThemeCheck::MatchingTranslations < ThemeCheck::JsonCheck
  def initialize; end
  def on_end; end
  def on_file(file); end
end
class ThemeCheck::RequiredLayoutThemeObject < ThemeCheck::LiquidCheck
  def add_missing_object_offense(name, tag); end
  def after_document(node); end
  def initialize; end
  def on_document(node); end
  def on_variable(node); end
end
class ThemeCheck::MissingEnableComment < ThemeCheck::LiquidCheck
  def after_document(node); end
  def on_comment(node); end
  def on_document(_node); end
end
class ThemeCheck::DefaultLocale < ThemeCheck::JsonCheck
  def on_end; end
end
class ThemeCheck::UndefinedObject < ThemeCheck::LiquidCheck
  def check_object(info, all_global_objects, render_node = nil, visited_snippets = nil); end
  def check_undefined(info, all_global_objects, render_node); end
  def each_template; end
  def ignore?(node); end
  def initialize(exclude_snippets: nil); end
  def on_assign(node); end
  def on_capture(node); end
  def on_document(node); end
  def on_end; end
  def on_for(node); end
  def on_include(_node); end
  def on_render(node); end
  def on_variable_lookup(node); end
end
class ThemeCheck::UndefinedObject::TemplateInfo
  def add_render(name:, node:); end
  def add_variable_lookup(name:, node:); end
  def all_assigns; end
  def all_captures; end
  def all_forloops; end
  def all_variables; end
  def each_snippet; end
  def each_variable_lookup(unique_keys = nil); end
  def initialize; end
end
class ThemeCheck::AssetUrlFilters < ThemeCheck::LiquidCheck
  def html_resource_drop?(variable_node); end
  def on_variable(node); end
  def record_variable_offense(variable_node); end
  def variable_hosted_by_shopify?(variable_node); end
end
class ThemeCheck::SchemaJsonFormat < ThemeCheck::LiquidCheck
  def initialize(start_level: nil, indent: nil); end
  def on_schema(node); end
end
class ThemeCheck::NestedSnippet < ThemeCheck::LiquidCheck
  def initialize(max_nesting_level: nil); end
  def on_document(node); end
  def on_end; end
  def on_include(node); end
  def on_render(node); end
end
class Anonymous_Struct_5 < Struct
  def includes; end
  def includes=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class ThemeCheck::NestedSnippet::TemplateInfo < Anonymous_Struct_5
  def with_deep_nested(templates, max, current_level = nil); end
end
class ThemeCheck::AssetSizeCSSStylesheetTag < ThemeCheck::LiquidCheck
  def initialize(threshold_in_bytes: nil); end
  def on_variable(node); end
  def stylesheet_tag_pipeline_to_file_size(href); end
  include ThemeCheck::RegexHelpers
end
class ThemeCheck::SpaceInsideBraces < ThemeCheck::LiquidCheck
  def add_offense_for_match(message, match, node, source_offset, &block); end
  def add_space_missing_after_offense(match, node, source_offset); end
  def add_space_missing_before_offense(match, node, source_offset); end
  def add_too_many_spaces_after_offense(match, node, source_offset); end
  def add_too_many_spaces_before_offense(match, node, source_offset); end
  def on_node(node); end
  def on_tag(node); end
  def on_variable(node); end
end
class ThemeCheck::SpaceInsideBraces::BlockMarkup < Struct
  def markup; end
  def markup=(_); end
  def node_markup_offset; end
  def node_markup_offset=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
